#!/usr/bin/env node
// Generated by LiveScript 1.4.0
(function(){
  var fs, cheerio, process, path, optionator, glob, src_path, options, get_abs_path_noerr, get_abs_path, get_abs_path_script, script_deps, get_html_import_abspath, html_import_deps, generated_during_this_run, generate_dependencies_for_file;
  fs = require('fs');
  cheerio = require('cheerio');
  process = require('process');
  path = require('path');
  optionator = require('optionator');
  glob = require('glob');
  src_path = path.resolve(process.argv[1], '../../src');
  options = {};
  (function(){
    var options_list, option_parser;
    options_list = [
      {
        option: 'tostdout',
        type: 'Boolean',
        'default': 'false',
        description: 'Prints result to stdout instead of writing to file'
      }, {
        option: 'verbose',
        type: 'Boolean',
        'default': 'false',
        description: 'Prints additional information to stdout'
      }, {
        option: 'regenerate',
        type: 'Boolean',
        'default': 'true',
        description: 'Regenerates files that already exist'
      }, {
        option: 'recursive',
        type: 'Boolean',
        'default': 'true',
        description: 'Generates files recursively'
      }
    ];
    option_parser = optionator({
      options: options_list
    });
    return options = option_parser.parseArgv(process.argv);
  })();
  get_abs_path_noerr = function(import_path, filepath_abs){
    var output;
    output = path.resolve(filepath_abs, import_path);
    if (fs.existsSync(output)) {
      return output;
    }
    output = path.resolve(src_path, import_path);
    if (fs.existsSync(output)) {
      return output;
    }
    return null;
  };
  get_abs_path = function(import_path, filepath_abs){
    var output;
    output = get_abs_path_noerr(import_path, filepath_abs);
    if (output == null) {
      console.log("missing file " + import_path + " relative to " + filepath_abs + " or " + src_path);
    }
    return output;
  };
  get_abs_path_script = function(import_path, filepath_abs){
    var output, i$, ref$, len$, extension;
    output = get_abs_path_noerr(import_path, filepath_abs);
    if (output == null) {
      for (i$ = 0, len$ = (ref$ = ['.ls', '.jsx']).length; i$ < len$; ++i$) {
        extension = ref$[i$];
        output = get_abs_path_noerr(import_path.replace(/\.js$/, extension), filepath_abs);
        if (output !== null) {
          break;
        }
      }
    }
    if (output == null) {
      console.log("missing file " + import_path + " relative to " + filepath_abs + " or " + src_path);
    }
    return output;
  };
  script_deps = function(tag, params){
    var filepath_abs, filename_abs, $, import_path, filename_rel;
    filepath_abs = params.filepath_abs, filename_abs = params.filename_abs, $ = params.$;
    import_path = $(tag).attr('src');
    if (import_path == null) {
      console.log("script tag in " + filename_abs + " is missing src attribute");
      return '';
    }
    filename_abs = get_abs_path_script(import_path, filepath_abs);
    if (filename_abs == null) {
      return '';
    }
    filename_rel = path.relative(src_path, filename_abs);
    return "require('" + filename_rel + "')";
  };
  get_html_import_abspath = function(tag, params){
    var filepath_rel, filepath_abs, $, import_path, filename_abs;
    filepath_rel = params.filepath_rel, filepath_abs = params.filepath_abs, $ = params.$;
    import_path = $(tag).attr('href');
    filename_abs = get_abs_path(import_path, filepath_abs);
    return filename_abs;
  };
  html_import_deps = function(tag, params){
    var filepath_rel, filepath_abs, $, import_path, filename_abs, filename_rel, output, deps_file;
    filepath_rel = params.filepath_rel, filepath_abs = params.filepath_abs, $ = params.$;
    import_path = $(tag).attr('href');
    filename_abs = get_abs_path(import_path, filepath_abs);
    if (filename_abs == null) {
      return '';
    }
    filename_rel = path.relative(src_path, filename_abs);
    output = [];
    deps_file = filename_rel.replace(/\.html$/, '.deps.js');
    output.push("require('" + deps_file + "')");
    return output.join("\n");
  };
  generated_during_this_run = {};
  generate_dependencies_for_file = function(filename_abs){
    var outfile_abs, filename_rel, filepath_rel, filepath_abs, $, params, output, dependencies, i$, ref$, len$, tag, dependency_file, dep;
    outfile_abs = filename_abs.replace(/\.html/, '.deps.js');
    if (generated_during_this_run[outfile_abs]) {
      return;
    }
    generated_during_this_run[outfile_abs] = true;
    if (!options.tostdout && fs.existsSync(outfile_abs)) {
      if (!options.regenerate) {
        return;
      }
      fs.unlinkSync(outfile_abs);
    }
    if (options.verbose) {
      console.log("generating: " + outfile_abs);
    }
    filename_rel = path.relative(src_path, filename_abs);
    filepath_rel = path.resolve(filename_rel, '..');
    filepath_abs = path.resolve(filename_abs, '..');
    $ = cheerio.load(fs.readFileSync(filename_abs, 'utf-8'));
    params = {
      filepath_rel: filepath_rel,
      filepath_abs: filepath_abs,
      filename_abs: filename_abs,
      $: $
    };
    output = [];
    dependencies = [];
    output.push('// this file was generated by scripts/generate_polymer_dependencies');
    output.push('// do not edit this file directly');
    output.push('// instead, edit the corresponding .html file and re-run the script');
    output.push("const {import_dom_modules} = require('libs_frontend/dom_utils')");
    for (i$ = 0, len$ = (ref$ = $('link[rel="import"]')).length; i$ < len$; ++i$) {
      tag = ref$[i$];
      dependency_file = get_html_import_abspath(tag, params);
      if (dependency_file == null) {
        console.log("html import does not exist for " + filename_abs);
        continue;
      }
      dependencies.push(dependency_file);
      output.push(html_import_deps(tag, params));
    }
    output.push("import_dom_modules(require('html!" + filename_rel + "'))");
    for (i$ = 0, len$ = (ref$ = $('script')).length; i$ < len$; ++i$) {
      tag = ref$[i$];
      output.push(script_deps(tag, params));
    }
    output = output.join("\n").split("\n").filter(function(it){
      return it.length > 0;
    }).join("\n") + "\n";
    if (options.tostdout) {
      console.log(output);
      return;
    }
    fs.writeFileSync(outfile_abs, output);
    if (options.recursive) {
      for (i$ = 0, len$ = dependencies.length; i$ < len$; ++i$) {
        dep = dependencies[i$];
        generate_dependencies_for_file(dep);
      }
    }
  };
  (function(){
    var filename, i$, ref$, len$;
    filename = options['_'][0];
    if (filename != null) {
      filename = path.resolve(filename);
      generate_dependencies_for_file(filename);
    } else {
      for (i$ = 0, len$ = (ref$ = glob.sync(src_path + '/**/*.html')).length; i$ < len$; ++i$) {
        filename = ref$[i$];
        if (filename.indexOf('/bower_components/') !== -1) {
          continue;
        }
        generate_dependencies_for_file(filename);
      }
    }
  })();
}).call(this);
